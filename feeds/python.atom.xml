<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>On Coding</title><link href="http://leemendelowitz.github.io/blog/" rel="alternate"></link><link href="http://leemendelowitz.github.io/blog/feeds/python.atom.xml" rel="self"></link><id>http://leemendelowitz.github.io/blog/</id><updated>2013-10-02T17:45:00+02:00</updated><entry><title>Wrapping Python Dictionaries</title><link href="http://leemendelowitz.github.io/blog/wrapping-python-dictionaries.html" rel="alternate"></link><updated>2013-10-02T17:45:00+02:00</updated><author><name>Lee Mendelowitz</name></author><id>tag:leemendelowitz.github.io/blog,2013-10-02:wrapping-python-dictionaries.html</id><summary type="html">&lt;p&gt;Very frequently when I'm programming in python, I write functions that return a
dictionary with string keys.&lt;/p&gt;
&lt;p&gt;When developing or debugging such programs in IPython, it's pretty tedious to
inspect these dictionaries. First, you need to get a list of keys. Then, to see a particular
value in the dictionary &lt;code&gt;d&lt;/code&gt;, you need to type out &lt;code&gt;d['key']&lt;/code&gt;. It gets tedious
after a while.&lt;/p&gt;
&lt;p&gt;IPython has really useful object introspection and tab-completion features, but they aren't
useful in this situation. A simple hack is to implement a class which sets the instance attributes
using the key/value pairs stored in a dictionary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DictWrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Class to wrap a python dictionary.&lt;/span&gt;
&lt;span class="sd"&gt;    This helps with tab completion for object introspection in IPython&lt;/span&gt;

&lt;span class="sd"&gt;        myD = {&amp;#39;one&amp;#39; : 1, &amp;#39;two&amp;#39; : 2}&lt;/span&gt;
&lt;span class="sd"&gt;        d = DictWrap(myD)&lt;/span&gt;

&lt;span class="sd"&gt;    Now in IPython you can inspect and autocomplete with d.o&amp;lt;TAB&amp;gt;&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Construct a DictWrap instance from a python dictionary d&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="ipython"></category></entry></feed>