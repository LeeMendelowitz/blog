<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Lee On Coding</title><link href="https://leemendelowitz.github.io/blog/" rel="alternate"></link><link href="https://leemendelowitz.github.io/blog/feeds/misc.atom.xml" rel="self"></link><id>https://leemendelowitz.github.io/blog/</id><updated>2014-10-23T09:20:00+02:00</updated><entry><title>Installing Numpy with OpenBlas</title><link href="https://leemendelowitz.github.io/blog/installing-numpy-with-openblas.html" rel="alternate"></link><updated>2014-10-23T09:20:00+02:00</updated><author><name>Lee Mendelowitz</name></author><id>tag:leemendelowitz.github.io,2014-10-23:blog/installing-numpy-with-openblas.html</id><summary type="html">&lt;p&gt;I just went through the frustrating but in the end rewarding experience of trying to install numpy in my school computing RHEL5 environment where I don't have sudo privileges or much control over the environment. In the end, I learned quite a bit!&lt;/p&gt;
&lt;p&gt;My first attempt to install was through the normal path, where I activate a virtual environment created with &lt;code&gt;virtualenv&lt;/code&gt; and then use pip to install numpy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~
virtualenv env
&lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
pip install numpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But trying to build numpy in my environment led to this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ImportError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="sr"&gt;/venv/lib/python2.7/site-packages/numpy/linalg/&lt;/span&gt;&lt;span class="n"&gt;lapack_lite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;so&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;zgelsd_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So that's the clue - something is wrong with the lapack library numpy is trying to use from my environment. It's probably linked against something broken or something incompatible... or something missing.&lt;/p&gt;
&lt;p&gt;Here's what &lt;code&gt;ldd&lt;/code&gt; on the &lt;strong&gt;broken&lt;/strong&gt; lapack_lite.so gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ldd home/venv/lib/python2.7/site-packages/numpy/linalg/lapack_lite.so
        linux-vdso.so.1 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;  &lt;span class="o"&gt;(&lt;/span&gt;0x0000000000000000&lt;span class="o"&gt;)&lt;/span&gt;
        libpython2.7.so.1.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; not found
        libpthread.so.0 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /path/to/lib64/libpthread.so.0 &lt;span class="o"&gt;(&lt;/span&gt;0x0000000000000000&lt;span class="o"&gt;)&lt;/span&gt;
        libc.so.6 &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /path/to/lib64/libc.so.6 &lt;span class="o"&gt;(&lt;/span&gt;0x0000000000000000&lt;span class="o"&gt;)&lt;/span&gt;
        /path/to/lib64/ld-linux-x86-64.so.2 &lt;span class="o"&gt;(&lt;/span&gt;0x0000000000000000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, after some searching around, it seems like the best option was to compile the &lt;a href="https://github.com/xianyi/OpenBLAS"&gt;OpenBlas&lt;/a&gt; library and use that during the numpy build. I was able to salvage bits from &lt;a href="https://gist.github.com/sniderbr/5891950"&gt;this&lt;/a&gt;, and &lt;a href="http://gromgull.net/blog/2013/07/multithreaded-scipynumpy-with-openblas-on-debian/"&gt;this&lt;/a&gt; to get it to work.&lt;/p&gt;
&lt;h1&gt;Build OpenBlas&lt;/h1&gt;
&lt;p&gt;Untar the OpenBlas distribution &lt;a href="http://www.openblas.net/"&gt;available here&lt;/a&gt; and build using the makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make &lt;span class="nv"&gt;BINARY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;64 &lt;span class="nv"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gfortran &lt;span class="nv"&gt;USE_THREAD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
make &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/openblas install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;/path/to/openblas&lt;/code&gt; is the path where you'd like to install openblas. Again, since I did have &lt;code&gt;sudo&lt;/code&gt; privilegs, I chose a non-standard location.&lt;/p&gt;
&lt;h1&gt;Build Numpy&lt;/h1&gt;
&lt;p&gt;We need to build numpy and link it with the OpenBlas library. I couldn't achieve this with the default &lt;code&gt;pip&lt;/code&gt; install, so things had to be done manually as suggested in &lt;a href="http://gromgull.net/blog/2013/07/multithreaded-scipynumpy-with-openblas-on-debian/"&gt;this post&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate
pip uninstall numpy &lt;span class="c"&gt;# Uninstall the broken installation&lt;/span&gt;
mkdir env/download
pip install -d env/download numpy
mkdir env/build
&lt;span class="nb"&gt;cd &lt;/span&gt;env/build
tar xzf ../download/numpy-1.9.0.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;numpy-1.9.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the &lt;code&gt;numpy-1.9.0&lt;/code&gt; directory, create the &lt;code&gt;site.cfg&lt;/code&gt; file to customize the libraries that numpy uses on install. We need to point things to OpenBlas. Check out the &lt;code&gt;site.cfg.example&lt;/code&gt; file for what options you can set. This worked for me:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;DEFAULT&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /path/to/openblas/lib
&lt;span class="nv"&gt;include_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /path/to/openblas/include

&lt;span class="o"&gt;[&lt;/span&gt;atlas&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;atlas_libs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; openblas
&lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; openblas

&lt;span class="o"&gt;[&lt;/span&gt;openblas&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;libraries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; openblas
&lt;span class="nv"&gt;library_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  /path/to/openblas/lib
&lt;span class="nv"&gt;include_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  /path/to/openblas/include
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, build numpy &lt;strong&gt;being sure to specify the same fortran compiler that was used to build the OpenBlas library&lt;/strong&gt; (important point mentioned in the &lt;a href="http://docs.scipy.org/doc/numpy/user/install.html"&gt;scipy install docs&lt;/a&gt;). For good measure, I cleaned out all of the standard compile and linking flags from my environment to make sure I wasn't contaminating the build:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;unset &lt;/span&gt;CPPFLAGS
&lt;span class="nb"&gt;unset &lt;/span&gt;LDFLAGS
python setup.py build --fcompiler&lt;span class="o"&gt;=&lt;/span&gt;gnu95
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the build completes, install:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the virtual environment is active, this will install to the virtual environment.&lt;/p&gt;
&lt;p&gt;Finally, here's what &lt;code&gt;ldd&lt;/code&gt; on the working &lt;code&gt;lapack_lite.so&lt;/code&gt; library gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ldd&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lapack_lite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
        &lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vdso&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libopenblas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openblas&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libopenblas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libpython2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1.0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;
        &lt;span class="n"&gt;libgfortran&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libgfortran&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libgcc_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.8.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libgcc_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libquadmath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.8.3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libquadmath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;libpthread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libpthread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib64&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;64.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0000000000000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks much healthier!&lt;/p&gt;
&lt;h1&gt;Summary&lt;/h1&gt;
&lt;p&gt;I was able to install &lt;code&gt;numpy&lt;/code&gt; by first building and installing OpenBlas to a non-standard location, and then
manually building &lt;code&gt;numpy&lt;/code&gt; by creating the &lt;code&gt;site.cfg&lt;/code&gt; file to point to the OpenBlas libraries
and specifying which Fortan compiler to use.&lt;/p&gt;</summary><category term="python"></category><category term="numpy"></category></entry><entry><title>Ubuntu Server Virtual Machine with SSH using VirtualBox on Mac OS X</title><link href="https://leemendelowitz.github.io/blog/ubuntu-server-virtualbox.html" rel="alternate"></link><updated>2014-10-13T12:00:00+02:00</updated><author><name>Lee Mendelowitz</name></author><id>tag:leemendelowitz.github.io,2014-10-13:blog/ubuntu-server-virtualbox.html</id><summary type="html">&lt;p&gt;My laptop is a late 2011 MacBook Pro running OS X 10.9 Mavericks. It's my personal laptop, so I use it for everything - browsing, e-mail, and programming. While the OS X experience is wonderful, application development can be frustrating. For example, right now I'm trying to develop a Boost Python module, and I am having trouble compiling it on OS X.&lt;/p&gt;
&lt;p&gt;I intend to run my application in a Linux environment, so instead of learning the intricacies of porting my code and makefile to Mac OS X, I decided to install a local Ubuntu Server virtual machine (VM) on my MacBook. I installed Ubuntu Server instead of Ubuntu Desktop because I wanted to run a lightweight Linux environment, which should save laptop resources. I simply run the VM in the background, and ssh into it from the Mac terminal. Easy and awesome!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; This entire tutorial should take approximately 20 minutes (not including download times). &lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Install VirtualBox&lt;/h2&gt;
&lt;p&gt;Download and install VirtualBox &lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;here&lt;/a&gt;. The
instructions below were testing with VirtualBox 4.3.18 on OS X 10.9.5.&lt;/p&gt;
&lt;h2&gt;Download Ubuntu&lt;/h2&gt;
&lt;p&gt;Download the &lt;a href="http://www.ubuntu.com/download/server"&gt;Ubuntu Server 14.04.01 LTS&lt;/a&gt; iso image. &lt;/p&gt;
&lt;h2&gt;Setting up the Virtual Machine (VM)&lt;/h2&gt;
&lt;p&gt;You can configure your virtual machine (VM) using the VirtualBox graphical program, but it's quicker to set it up from the command line. I've adapted these commands in part from this &lt;a href="http://www.perkin.org.uk/posts/create-virtualbox-vm-from-the-command-line.html"&gt;blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The commands below will create a virtual machine called "UbuntuServer",
attach a 32 GB virtual hard drive, attach a DVD
drive loaded with the Ubuntu Server disk image, and allocate 1 GB of RAM. We also 
attach a network card and set up port forwarding. &lt;/p&gt;
&lt;!-- All of these settings can be easily changed in the future (except expanding the virtual hard ddrive size is kind of tricky because you'll have to [resize the drive partition](http://www.howtogeek.com/124622/how-to-enlarge-a-virtual-machines-disk-in-virtualbox-or-vmware/)). If you are curious, you can read more about these vboxmanage commands by referring to the [VirtualBox documentation](https://www.virtualbox.org/manual/ch08.html). --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/VirtualBox&lt;span class="se"&gt;\ &lt;/span&gt;VMs/

&lt;span class="c"&gt;# Change these variables as needed&lt;/span&gt;
&lt;span class="nv"&gt;VM_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UbuntuServer&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;UBUNTU_ISO_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Downloads/ubuntu-14.04.1-server-amd64.iso
&lt;span class="nv"&gt;VM_HD_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UbuntuServer.vdi&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# The path to VM hard disk (to be created).&lt;/span&gt;
&lt;span class="nv"&gt;SHARED_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="c"&gt;# Share home directory with the VM&lt;/span&gt;


vboxmanage createvm --name &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --ostype Ubuntu_64 --register
vboxmanage createhd --filename &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt;.vdi --size 32768
vboxmanage storagectl &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --name &lt;span class="s2"&gt;&amp;quot;SATA Controller&amp;quot;&lt;/span&gt; --add sata --controller IntelAHCI
vboxmanage storageattach &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --storagectl &lt;span class="s2"&gt;&amp;quot;SATA Controller&amp;quot;&lt;/span&gt; --port 0 --device 0 --type hdd --medium &lt;span class="nv"&gt;$VM_HD_PATH&lt;/span&gt;
vboxmanage storagectl &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --name &lt;span class="s2"&gt;&amp;quot;IDE Controller&amp;quot;&lt;/span&gt; --add ide
vboxmanage storageattach &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --storagectl &lt;span class="s2"&gt;&amp;quot;IDE Controller&amp;quot;&lt;/span&gt; --port 0 --device 0 --type dvddrive --medium &lt;span class="nv"&gt;$UBUNTU_ISO_PATH&lt;/span&gt;
vboxmanage modifyvm &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --ioapic on
vboxmanage modifyvm &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --memory 1024 --vram 128
vboxmanage modifyvm &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --nic1 nat
vboxmanage modifyvm &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --natpf1 &lt;span class="s2"&gt;&amp;quot;guestssh,tcp,,2222,,22&amp;quot;&lt;/span&gt;
vboxmanage modifyvm &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --natdnshostresolver1 on
vboxmanage sharedfolder add &lt;span class="nv"&gt;$VM_NAME&lt;/span&gt; --name shared --hostpath &lt;span class="nv"&gt;$SHARED_PATH&lt;/span&gt; --automount
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start the VM for the first time&lt;/h3&gt;
&lt;p&gt;For the first boot, we will start the VM with a graphical display so we can install
the Ubuntu operating system. &lt;strong&gt;From your OS X terminal&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vboxmanage startvm UbuntuServer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The VM will boot from the DVD Drive, which has the Ubuntu Server installation CD image loaded. &lt;/p&gt;
&lt;h3&gt;Install Ubuntu Server&lt;/h3&gt;
&lt;p&gt;Install Ubuntu Server using the installation wizard with the default settings. The installer is interactive - it should take about 10 minutes to complete the installation. As part of the installation you will be asked to select a username and a password. &lt;/p&gt;
&lt;p&gt;After installation is complete, the machine will reboot. Log in at the prompt.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: If you accidentally click on the VM GUI window, VirtualBox may "hijack" your mouse pointer to try passing it to the VM. If this happens and you lose your mouse pointer, press the left command key to get your mouse pointer back.&lt;/p&gt;
&lt;h3&gt;Install the OpenSSH Server&lt;/h3&gt;
&lt;p&gt;After installing the Ubuntu operating system and logging in to VM, to install the ssh server, issue the following command &lt;strong&gt;in the Ubuntu VM&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get update
sudo apt-get install -y openssh-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can try logging into your virtual machine over ssh through port 2222, which has been set up to forward to port 22 of your VM. &lt;strong&gt;From the OS X terminal&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -p 2222 &amp;lt;username&amp;gt;@localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congrats! :-)&lt;/p&gt;
&lt;p&gt;For the rest of this installation guide, I recommend issuing all VM commands over ssh because the display is better than the VM GUI console, and you can easily paste commands into the Mac ssh terminal.&lt;/p&gt;
&lt;h3&gt;Install VirtualBox Guest Additions (for shared folders)&lt;/h3&gt;
&lt;p&gt;To share a folder from your host machine (i.e. Mac) with the VM, you need to install
the VirtualBox Guest Additions in the VM. &lt;/p&gt;
&lt;p&gt;Before you can install the Guest additions, you need to install &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; into the VM. Make sure your laptop is connected to the internet (&lt;strong&gt;in the VM&lt;/strong&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get -y install gcc make linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the VirtualBox VM GUI window menu, select "Devices -&amp;gt; Insert Guest Additions CD Image...". If prompted, choose "Force Unmount". &lt;/p&gt;
&lt;p&gt;This will insert the VirtualBox GuestAdditions installation CD into the VM's DVD drive. From the VM terminal (or, more comfortably, the ssh terminal), mount the CD drive and run the installation script. &lt;strong&gt;In the VM&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mount /dev/sr0 /media/cdrom
sudo /media/cdrom/VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, add your user to the &lt;code&gt;vboxsf&lt;/code&gt; group so you can access shared folders (&lt;strong&gt;in the VM&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo usermod -g vboxsf &amp;lt;username&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the GuestAdditions installation to take effect, you need to reboot the VM. We'll take care of that in the next section when we boot the VM without a GUI.&lt;/p&gt;
&lt;h3&gt;Starting the VM without GUI.&lt;/h3&gt;
&lt;p&gt;Now that ssh has been installed and configured, you can run the VM in the background without a GUI window.&lt;/p&gt;
&lt;p&gt;First, shutdown the VM using one of these methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the VM GUI, close the window and select "Send Shutdown Signal", OR&lt;/li&gt;
&lt;li&gt;From the VM GUI menu, select "Machine -&amp;gt; ACPI Shutdown" OR&lt;/li&gt;
&lt;li&gt;From the Mac terminal, issue &lt;code&gt;vboxmanage controlvm UbuntuServer poweroff&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, start the VM without a GUI from the OS X terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vboxmanage startvm UbuntuServer --type headless
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The VM will be running in the background. Give the VM a few moments to boot up, and then you can try to log in again over ssh as before from the OX X terminal: &lt;code&gt;ssh -p 2222 &amp;lt;username&amp;gt;@localhost&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Access shared folders&lt;/h3&gt;
&lt;p&gt;To access your Mac home directory from the VM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sf_shared&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your files should be there. If you get a "permission denied", make sure you added your user to the &lt;code&gt;vboxsf&lt;/code&gt; group.&lt;/p&gt;
&lt;p&gt;Contratulations. Now you have a local lightweight Linux environment that you can access over ssh!&lt;/p&gt;
&lt;h2&gt;Quick Reference&lt;/h2&gt;
&lt;p&gt;To shutdown the VM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vboxmanage controlvm UbuntuServer poweroff
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also pause the VM instead of shutting it down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vboxmanage controlvm UbuntuServer savestate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To start the VM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vboxmanage startvm UbuntuServer --type headless
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To log into the VM over ssh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -p 2222 &amp;lt;username&amp;gt;@localhost
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Additional Tweaks&lt;/h2&gt;
&lt;p&gt;Here are some solutions to other issues that may arise:&lt;/p&gt;
&lt;h3&gt;Configure the Grub Boot Loader&lt;/h3&gt;
&lt;p&gt;On one occasion I powered off the VM while it was booting. The next time time I tried to start the VM without the GUI, I could not log in over ssh because, unknown to me at the time, the VM was sitting in the GRUB bootloader menu waiting for my input. &lt;/p&gt;
&lt;p&gt;You can configure GRUB to timeout by editing the VM's GRUB configuration file at
&lt;code&gt;/etc/default/grub&lt;/code&gt; with the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;GRUB_RECORDFAIL_TIMEOUT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will
timeout the bootloader with the default selection after 2 seconds whenever the system
is started after the last boot failed. For more info, see the &lt;a href="https://help.ubuntu.com/community/Grub2"&gt;Ubuntu GRUB 2 page.&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Keeping SSH Alive when laptop sleeps&lt;/h3&gt;
&lt;p&gt;Configure the VM ssh server to keep connections alive by editing the VM's config file
&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; and adding the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ClientAliveInterval 300
ClientAliveCountMax 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When your laptop sleeps, you may find that your ssh connection to the VM is terimnated.
This is the result of some &lt;a href="https://www.virtualbox.org/ticket/12441"&gt;VirtualBox bug&lt;/a&gt; which has since been resolved provided that you change the VM's DNS resolution setting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;VBoxManage modifyvm UbuntuServer --natdnshostresolver1 on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That did the trick for me.&lt;/p&gt;</summary><category term="Ubuntu"></category><category term="VirtualBox"></category></entry><entry><title>D3 Update Enter Exit Selections</title><link href="https://leemendelowitz.github.io/blog/d3-update-enter-exit-selections.html" rel="alternate"></link><updated>2014-04-28T12:00:00+02:00</updated><author><name>Lee Mendelowitz</name></author><id>tag:leemendelowitz.github.io,2014-04-28:blog/d3-update-enter-exit-selections.html</id><summary type="html">&lt;p&gt;Lately I've been playing around with the D3 javascript library for data visualizations in a browser. D3 stands for "Data Driven Documents" and provides utilities for manipulating elements on a webpage based on data. The D3 &lt;a href="https://github.com/mbostock/d3/wiki/Gallery"&gt;gallery&lt;/a&gt; is very impressive.&lt;/p&gt;
&lt;p&gt;I've had trouble wrapping my head around the update, enter, and exit selections, which provide a mechanism for updating, inserting, and removing elements from a page based on changes in data.&lt;/p&gt;
&lt;p&gt;There are already some great &lt;a href="https://github.com/mbostock/d3/wiki/Tutorials"&gt;tutorials&lt;/a&gt; by Mike Bostock and others on &lt;a href="http://bost.ocks.org/mike/join/"&gt;joins&lt;/a&gt;, &lt;a href="http://bl.ocks.org/mbostock/3808234"&gt;updates&lt;/a&gt; and &lt;a href="http://bost.ocks.org/mike/selection/"&gt;selections&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I challenged myself to create a demo which illustrates populating a table with changing data using the full update pattern. The table is a little more challenging because the data is nested; data is first bound to each row as an array of values, then data is bound to each cell of the row as a single value. We have to handle cases where cells are added to or deleted from existing rows, and where entire rows are added or deleted.&lt;/p&gt;
&lt;p&gt;You can see the demo below and check out the source &lt;a href="http://bl.ocks.org/LeeMendelowitz/11383724"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;iframe src="code/d3_updating_table.html" marginwidth="0" marginheight="0" width="600" height="1000"&gt;&lt;/iframe&gt;</summary><category term="d3"></category><category term="javascript"></category></entry><entry><title>Python OS X Mavericks Issues</title><link href="https://leemendelowitz.github.io/blog/python-mavericks-issues.html" rel="alternate"></link><updated>2014-03-29T02:00:00+01:00</updated><author><name>Lee Mendelowitz</name></author><id>tag:leemendelowitz.github.io,2014-03-29:blog/python-mavericks-issues.html</id><summary type="html">&lt;p&gt;Yesterday I decided to upgrade OS X on my Late-2011 Mac Book Pro from 10.7 Lion to 10.9 Mavericks. I felt no rush to upgrade - "If it ain't broke, don't fix it!" - but after reading about the new features, particularly the improved support for multiple displays - I decided to give it a shot.&lt;/p&gt;
&lt;p&gt;Everything went smoothly - except that my Python installation completely broke. This was a big break - I work in Python almost everyday. By broke, I mean that Apple wiped out all of the python libraries I've installed - pip, virtualenv, numpy, matplotlib, ipython, pandas, flask, greenlet - all gone.&lt;/p&gt;
&lt;p&gt;In retrospect, it was my mistake. I was installing packages in &lt;code&gt;/Library/Python/2.7/site-packages&lt;/code&gt;, which Apple wiped clean when I upgraded to Mavericks.&lt;/p&gt;
&lt;p&gt;I recovered by installing Python using Homebrew. It's a much better option because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the installation will come with &lt;code&gt;pip&lt;/code&gt; installed&lt;/li&gt;
&lt;li&gt;the Python packages you install will be put in a safe place and you won't need to use &lt;code&gt;sudo&lt;/code&gt; to install them.&lt;/li&gt;
&lt;li&gt;You'll avoid some compilation errors when installing some packages.&lt;ul&gt;
&lt;li&gt;I encountered &lt;a href="http://stackoverflow.com/questions/22313407/clang-error-unknown-argument-mno-fused-madd-python-package-installation-fa"&gt;this&lt;/a&gt; issue when trying to install &lt;code&gt;greenlet&lt;/code&gt; package using an &lt;code&gt;easy_install&lt;/code&gt;'ed version of' &lt;code&gt;pip&lt;/code&gt;, but &lt;strong&gt;not&lt;/strong&gt; with the Homebrew installed &lt;code&gt;pip&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are the steps I followed to fix my Python installation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You need to reinstall XCode and the Command Line Tools to get a compiler. This can be done from the App Store. Lots of resources on how to do this - see &lt;a href="http://railsapps.github.io/xcode-command-line-tools.html"&gt;this&lt;/a&gt; or &lt;a href="http://railsapps.github.io/xcode-command-line-tools.html"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Python with &lt;a href="http://brew.sh"&gt;Homebrew&lt;/a&gt; instead of using the Python interpreter which ships with Mavericks. Homebrew will install the latest Python v2.7.6, while Mavericks ships with v2.7.5:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew update
brew install python
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade setuptools and pip, as suggested:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install --upgrade setuptools
pip install --upgrade pip
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install your favorite package&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install numpy, ipython, matplotlib, pandas, flask, yolk
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These will be installed to &lt;code&gt;/usr/local/lib/python2.7/site-packages&lt;/code&gt;, which is a safe zone. Future OS X upgrades won't wipe out your installed packages.&lt;/p&gt;
&lt;p&gt;I'm still getting build errors on scipy that I have not yet resolved, but I'll save that for another rainy day.&lt;/p&gt;
&lt;p&gt;In conclusion, use Homebrew to stay &lt;em&gt;mostly&lt;/em&gt; sane.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Start Me Up!</title><link href="https://leemendelowitz.github.io/blog/start-me-up.html" rel="alternate"></link><updated>2013-10-02T07:35:00+02:00</updated><author><name>Lee Mendelowitz</name></author><id>tag:leemendelowitz.github.io,2013-10-02:blog/start-me-up.html</id><summary type="html">&lt;!--- #Status: draft --&gt;

&lt;p&gt;Welcome to the blog!&lt;/p&gt;
&lt;p&gt;After a nice cup of coffee this morning, I impulsively created this blog because I don't
have a good way of storing programming notes, complete with syntax
highlighting. I have been using Google Drive, which doesn't really cut it.
I also thought it would be fun to learn
how to publish a blog using &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; + GitHub, so there's
also that. Checkout the
&lt;a href="https://github.com/LeeMendelowitz/blog"&gt;GitHub repo&lt;/a&gt;
for this blog! I just followed the &lt;code&gt;pelican-quickstart&lt;/code&gt;, modified the Makefile, and was up and running.&lt;/p&gt;
&lt;p&gt;I'm currently taking the Coursera course &lt;a href="https://class.coursera.org/compdata-003/class"&gt;Computing for Data Science&lt;/a&gt; by Roger Peng, so I'll probably start off with some simple notes on R programming.&lt;/p&gt;</summary></entry></feed>